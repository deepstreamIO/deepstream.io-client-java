plugins {
    id 'maven'
    id 'maven-publish'
    id 'java'
    id "com.jfrog.bintray" version "1.7"
    id 'com.github.j2objccontrib.j2objcgradle' version '0.6.0-alpha'
}

task client(type: Jar) {
    baseName = project.name
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

artifacts {
    archives client
}

sourceSets {
    testapplication {
        compileClasspath += sourceSets.main.compileClasspath
    }
}

defaultTasks 'build'

repositories {
    jcenter()
}

sourceSets {
    testapplication {
        compileClasspath += sourceSets.main.runtimeClasspath
    }
}

dependencies {
    compile 'com.google.code.gson:gson:2.6.2'
    compile 'org.java-websocket:Java-WebSocket:1.3.4'
    compile 'com.google.j2objc:j2objc-annotations:1.1'

    testCompile group: 'junit', name: 'junit', version: '4.11'
    testCompile "org.mockito:mockito-core:1.+"

    sourceCompatibility = 1.7
    targetCompatibility = 1.7
}

j2objcConfig {
    skipJ2objcVerification true
    autoConfigureDeps true
    supportedArchs += ['ios_i386']
    testPattern {
        include '**/*Test.java'
    }

    translateArgs "--no-package-directories", "-use-arc", "--build-closure", "--nullability"
    translateArgs "--strip-gwt-incompatible"
    translateArgs "--prefixes", "${projectDir}/prefixes.properties"
    translateArgs "--doc-comments"
    translateArgs "--swift-friendly"

    extraObjcCompilerArgs '-fobjc-arc', '-fembed-bitcode', '-Wno-nullability-completeness'
    finalConfigure() // Must be last call to configuration
}

group 'io.deepstream'
version '2.2.2'

publishing {
    publications {
        MyPublication(MavenPublication) {
            from components.java
            groupId 'io.deepstream'
            artifactId 'deepstream.io-client-java'
            version '2.2.2'
        }
    }
}

bintray {

    user = System.getenv('BINTRAY_USER')
    key = System.getenv('BINTRAY_KEY')

    configurations = ['archives'] //When uploading configuration files

    dryRun = false //[Default: false] Whether to run this as dry-run, without deploying
    publish = true //[Default: false] Whether version should be auto published after an upload
    override = false //[Default: false] Whether to override version artifacts already published
    //Package configuration. The plugin will use the repo and name properties to check if the package already exists. In that case, there's no need to configure the other package properties (like userOrg, desc, etc).
    pkg {
        repo = 'maven'
        name = 'deepstream.io-client-java'
        userOrg = 'deepstreamio'
        desc = 'Java deepstream.io library'
        websiteUrl = 'https://deepstream.io/'
        issueTrackerUrl = 'https://github.com/deepstreamIO/deepstream.io-client-java/issues'
        vcsUrl = 'https://github.com/deepstreamIO/deepstream.io-client-java.git'
        licenses = ['Apache-2.0']
        labels = ['deepstream.io', 'data-sync', 'realtime', 'pubsub', 'rpc']
        publicDownloadNumbers = false

        githubRepo = 'https://github.com/deepstreamIO/deepstream.io-client-java'
        githubReleaseNotesFile = 'README.md'

        //Optional version descriptor
        version {
            name = '2.2.2'
            released = new Date()
            gpg {
                sign = true
            }
        }
    }
}
